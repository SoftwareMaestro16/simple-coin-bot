const { chats, admins } = require('../utils/config');
const { getAllUsers, updateUserSubscription } = require('../db');

async function checkMonthlyChatUsers(bot) {
    const chat = chats.mediumLevel;

    try {
        const users = await getAllUsers();

        for (const user of users) {
            const userId = user.userId;

            if (admins.includes(userId)) {
                console.log(`Skipping admin: ${userId}`);
                continue;
            }

            if (!user.subscriptionExpiresAt) {
                console.log(`User ${userId} has no subscription.`);
                continue;
            }

            const subscriptionDate = new Date(user.subscriptionExpiresAt);
            const currentDate = new Date();
            const timeRemaining = subscriptionDate - currentDate;

            if (timeRemaining > 0 && timeRemaining <= 24 * 60 * 60 * 1000) {
                console.log(`User ${userId} subscription expires in less than 1 day.`);
                try {
                    await bot.sendMessage(
                        userId,
                        `‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç <b>${new Intl.DateTimeFormat('ru-RU', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit',
                        }).format(subscriptionDate)}</b>.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.`,
                        {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: '‚ú® –ü—Ä–æ–¥–ª–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É üîë',
                                            callback_data: 'MonthlyChat',
                                        },
                                    ],
                                ],
                            },
                        }
                    );
                } catch (error) {
                    console.error(`Error sending message to user ${userId}:`, error);
                }
            } else if (timeRemaining <= 0) {
                console.log(`User ${userId} subscription expired. Removing from chat.`);
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–Ω–µ —á–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    const chatMember = await bot.getChatMember(chat.id, userId);
                    if (chatMember.status === 'left' || chatMember.status === 'kicked') {
                        console.log(`User ${userId} is already out of the chat. Skipping message.`);
                        continue;
                    }

                    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
                    await bot.banChatMember(chat.id, userId);
                    await bot.unbanChatMember(chat.id, userId);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    await bot.sendMessage(
                        userId,
                        `‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: '‚ú® –ü—Ä–æ–¥–ª–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É üîë',
                                            callback_data: 'MonthlyChat',
                                        },
                                    ],
                                ],
                            },
                        }
                    );
                } catch (error) {
                    console.error(`Error removing user ${userId} from chat:`, error);
                }
            } else {
                console.log(`User ${userId} subscription is active.`);
            }
        }
    } catch (error) {
        console.error('Error checking monthly chat users:', error);
    }
}

function startMonthlyChatUserCheck(bot) {
  setInterval(() => checkMonthlyChatUsers(bot), 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
}

module.exports = {
  startMonthlyChatUserCheck,
};