const bot = require('../bot');
const { handleProfile, handleDisconnectWallet, handleWalletConnection, handlePrivateChat, handleUpdateTrackingCode, handleMonthlyChatMenu } = require('./walletHandlers');
const { getUserById, addUser, getAllUsers } = require('../db');
const { generateMainKeyboard } = require('./keyboardUtils');
const { admins, chats } = require('../utils/config');
const { getData } = require('../utils/getBalance');
const { setCollectorAddress, setMonthlyTokens, getCollector } = require("../db.js");
const { adminCommands } = require("../utils/adminCommands.js")

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name || 'Unknown';
  const userName = msg.from.username || null;

  try {
    const existingUser = await getUserById(userId);

    if (!existingUser) {
      await addUser(userId, firstName, userName);
    }

    const address = existingUser?.address || null;

    const text = address
      ? '‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:'
      : '‚òÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:';

    const keyboard = generateMainKeyboard(address);

    bot.sendMessage(chatId, text, {
      reply_markup: { inline_keyboard: keyboard },
    });
  } catch (error) {
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

bot.onText(/\/show_users/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  try {
    const users = await getAllUsers();
    if (users.length === 0) {
      bot.sendMessage(chatId, '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    } else {
      let userList = 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';

      users.forEach((user, index) => {
        const firstName = user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const userName = user.userName ? `@${user.userName}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
        userList += `${index + 1}. <b>${firstName}</b> (${userName})\n`;
      });

      bot.sendMessage(chatId, userList, { parse_mode: 'HTML' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

bot.onText(/\/count_users/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  try {
    const users = await getAllUsers();
    const userCount = users.length;

    bot.sendMessage(chatId, `üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–µ–π).`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
});

bot.onText(/\/set_collector_address/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–±–æ—Ä—â–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

  const listener = bot.on('message', async (response) => {
    if (response.text === '/cancel') {
      bot.removeListener('message', listener);
      return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
    }

    try {
      const address = response.text.trim();
      if (!address) throw new Error('–ü—É—Å—Ç–æ–π –∞–¥—Ä–µ—Å.');

      await setCollectorAddress(address);
      await bot.sendMessage(chatId, `‚úÖ –ê–¥—Ä–µ—Å —Å–±–æ—Ä—â–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${address}`);
      bot.removeListener('message', listener);
    } catch (error) {
      console.error('Error setting collector address:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞.');
      bot.removeListener('message', listener);
    }
  });
});

bot.onText(/\/set_monthly_tokens/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.');

  const listener = bot.on('message', async (response) => {
    if (response.text === '/cancel') {
      bot.removeListener('message', listener);
      return bot.sendMessage(chatId, '‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.');
    }

    try {
      const input = response.text.trim().replace(',', '.');
      const tokens = parseFloat(input);

      if (isNaN(tokens) || tokens <= 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.');
      }

      await setMonthlyTokens(tokens);
      await bot.sendMessage(chatId, `‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${tokens}`);
      bot.removeListener('message', listener);
    } catch (error) {
      console.error('Error setting monthly tokens:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.');
      bot.removeListener('message', listener);
    }
  });
});

bot.onText(/\/get_payment_info/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  try {
    const collector = await getCollector();

    if (!collector || !collector.collectorAddress || collector.monthlyAmount === undefined) {
      await bot.sendMessage(
        chatId,
        '‚ùå –î–∞–Ω–Ω—ã–µ —Å–±–æ—Ä—â–∏–∫–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é /set_collector_address –∏ /set_monthly_tokens.'
      );
      return;
    }

    const message = `
üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:</b>

üîë <b>–ê–¥—Ä–µ—Å C–±–æ—Ä—â–∏–∫–∞:</b>
<code>${collector.collectorAddress}.</code>

üí∞ <b>–°—É–º–º–∞ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ü–ª–∞—Ç–µ–∂–∞:</b> ${collector.monthlyAmount} $SC.
    `;

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error fetching payment info:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.');
  }
});

bot.onText(/\/commands/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!admins.includes(userId)) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
  }

  let commandsList = 'üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n';

  adminCommands.forEach((cmd, index) => {
    commandsList += `${index + 1}. <b>${cmd.command}</b> - ${cmd.description}\n`;
  });

  bot.sendMessage(chatId, commandsList, { parse_mode: 'HTML' });
});

bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const callbackData = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;

  if (callbackData === 'Profile') {
    await handleProfile(chatId, messageId);
  } else if (callbackData === 'DisconnectWallet') {
    await handleDisconnectWallet(chatId, messageId);
  } else if (callbackData === 'PrivateChat') {
    await handlePrivateChat(chatId, messageId, bot);
  } else if (callbackData === 'UpdateTrackingCode') {
    await handleUpdateTrackingCode(chatId, messageId, bot);
  } else if (callbackData === 'MonthlyChat') {
      await handleMonthlyChatMenu(chatId, messageId, bot);
  } else if (callbackData === 'BackToMenu') {
    await bot.editMessageText(
      '‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:',
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data: 'Profile' },
            ],
            [
              { text: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ß–∞—Ç üåü', callback_data: 'PrivateChat' },
            ],
            [
              { text: 'DeDust üü®', url: 'https://dedust.io/swap/TON/EQB9QBqniFI0jOmw3PU6v1v4LU3Sivm9yPXDDB9Qf7cXTDft'},
            ],
          ],
        },
      }
    );
  } else if (['Tonkeeper', 'MyTonWallet', 'TonHub'].includes(callbackData)) {
    await handleWalletConnection(chatId, callbackData, messageId);
  }
});

bot.on('chat_join_request', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: chatId=${chatId}, userId=${userId}`);

  const user = await getUserById(userId);

  if (!user) {
    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
    return;
  }

  const chatConfig = Object.values(chats).find(chat => chat.id === chatId);

  if (!chatConfig) {
    console.warn(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–∞ —Å ID ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    return;
  }

  const requiredBalance = chatConfig.requirement;

  try {
    const address = user.address;

    if (!address) {
      console.error(`Address –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
      return;
    }

    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId=${userId}, address=${address}`);

    const currentBalance = await getData(address);

    console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: currentBalance=${currentBalance}, requiredBalance=${requiredBalance}`);

    if (currentBalance >= requiredBalance) {
      console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π. –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É: userId=${userId}`);
      await bot.approveChatJoinRequest(chatId, userId);

      const firstName = msg.from.first_name || '–£—á–∞—Å—Ç–Ω–∏–∫';
      await bot.sendMessage(
        chatId,
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${firstName}</b>, –≤ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç! üåü\n\n`,
        { parse_mode: 'HTML' }
      );
    } else {
      console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: userId=${userId}, balance=${currentBalance}, required=${requiredBalance}`);
      await bot.declineChatJoinRequest(chatId, userId);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: userId=${userId}, chatId=${chatId}`, error);
  }
});